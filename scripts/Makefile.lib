MAKEFLAGS += -rR --no-print-directory

ifdef V
  ifeq ("$(origin V)", "command line")
    V = $(V)
  endif
endif
ifndef V
  V = 0
endif

ifeq ($(V),1)
  quiet =
  Q =
else
  quiet=quiet_
  Q = @
endif

# Convenient variables
comma   := ,
quote   := "
squote  := '
empty   :=
space   := $(empty) $(empty)
space_escape := _-_SPACE_-_
pound	:= \#
srcdir	:= .

dot-target = $(dir $@).$(notdir $@)

# filename of target with directory and extension stripped
basetarget = $(basename $(notdir $@))

# escape single quote for use in echo statements
escsq = $(subst $(squote),'\$(squote)',$1)

# Easy method for doing a status message
kecho := :
quiet_kecho := echo
silent_kecho := :
kecho := $($(quiet)kecho)

# echo command.
# Short version is used, if $(quiet) equals `quiet_', otherwise full one.
echo-cmd = $(if $($(quiet)cmd_$(1)),\
	echo ' $(call escsq,$($(quiet)cmd_$(1)))';)

# printing commands
cmd = @set -e; $(echo-cmd) $(cmd_$(1))

# filechk is used to check if the content of a generated file is updated.
# Sample usage:
#
# filechk_sample = echo $(KERNELRELEASE)
# version.h: FORCE
#	$(call filechk,sample)
#
# The rule defined shall write to stdout the content of the new file.
# The existing file will be compared with the new one.
# - If no file exist it is created
# - If the content differ the new file is used
# - If they are equal no change, and no timestamp update
# - stdin is piped in from the first prerequisite ($<) so one has
#   to specify a valid file as first prerequisite (often the kbuild file)
define filechk
	$(Q)set -e;				\
	mkdir -p $(dir $@);			\
	{ $(filechk_$(1)); } > $@.tmp;		\
	if [ -r $@ ] && cmp -s $@ $@.tmp; then	\
		rm -f $@.tmp;			\
	else					\
		$(kecho) '  UPD     $@';	\
		mv -f $@.tmp $@;		\
	fi
endef

#
# Go
#
.PHONY: release
release: *.go
	$(foreach GOOSARCH,$(GOOSARCHES),$(call buildrelease,\
		$(subst /,,$(dir $(GOOSARCH))),$(notdir $(GOOSARCH))))

# Builds the cross-compiled binaries with a clean directory structure
cross: *.go
	$(foreach GOOSARCH,$(GOOSARCHES),$(call buildcross,\
		$(subst /,,$(dir $(GOOSARCH))),$(notdir $(GOOSARCH))))

# cross-compile the given target
# 	$(1) target os
# 	$(2) target architecture
define buildrelease
$(Q)GOOS=$(1) GOARCH=$(2) CGO_ENABLED=$(CGO_ENABLED) $(GO) build \
	 -o $(BUILDDIR)/$(NAME)-$(1)-$(2) \
	 -a -tags "$(BUILDTAGS) static_build netgo" \
	 -installsuffix netgo ${GO_LDFLAGS_STATIC} .;
$(Q)sha256sum $(BUILDDIR)/$(NAME)-$(1)-$(2) > $(BUILDDIR)/$(NAME)-$(1)-$(2).sha256;
endef

# buildcross is a macro that cross-compiles the given target
#	$(1) target os
#	$(2) target architecture
define buildcross
$(Q)mkdir -p $(BUILDDIR)/$(1)/$(2);
$(Q)GOOS=$(1) GOARCH=$(2) CGO_ENABLED=$(CGO_ENABLED) $(GO) build \
	 -o $(BUILDDIR)/$(1)/$(2)/$(NAME) \
	 -a -tags "$(BUILDTAGS) static_build netgo" \
	 -installsuffix netgo ${GO_LDFLAGS_STATIC} .;
$(Q)sha256sum $(BUILDDIR)/$(1)/$(2)/$(NAME) > $(BUILDDIR)/$(1)/$(2)/$(NAME).sha256;

endef
