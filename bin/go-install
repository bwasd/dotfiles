#!/bin/bash
##
# Usage: go-install [-h] [-c]
#
#	go-install downloads and installs Go binary releases
#
# Options and environment variables:
#
# OS
#	Host OS. Options: Linux, Darwin, Windows, Plan9.
#
# ARCH
#	Host CPU architecture. Options: x86_64, x86, armv8, armv6l,
#	s390x. The default is the host's architecture. See
#	https://golang.org/doc/install/source for a list of
#	instruction sets supported by the go compiler.
#
# MIRROR
#	Mirror to download releases from. (default:
#	https://storage.googleapis.com/golang/)
#
# VERIFY_RELSIG
#	Verify GPG release signatures (default: true)
#
# EXTRA_VERSIONS
#	Extra versions of go can be installed which may be useful when
#	ensuring package tests pass on multiple versions of Go.
#
# -c, check-version
#	Returns the latest stable go release version and exit.
#
# -h, help
#	Show this help message and exit.
#
# BUGS
#	getgo golang.org/tools/cmd/getgo already provides a
#	"proof-of-concept" installer for Go, and gotip from golang.org/dl
#	for compiling the go command from the development tree.
#
#	Not all OSes have been tested to work (BSD, Windows and
#	Plan9).
#
#	The tool removes $GOPATH, potentially destroying any uncommitted
#	work.
#
#	A better version of this tool should be re-written in Go or try to
#	improve golang.org/tools/cmd/getgo
#
##
set -e

OS=${OS:-}
ARCH=${ARCH:-}
MIRROR="https://storage.googleapis.com/golang/"
VERIFY_RELSIG=1

# alternate mirror
#MIRROR="https://golang.org/dl/"

# list of release candidates and/or specific versions of Go be installed
EXTRA_VERSIONS=()

if [ "$(uname)" = Darwin ]; then
	# see: https://github.com/golang/go/issues/23011
	if [ "$(sw_vers -productVersion | cut -d. -f2)" -lt 10 ]; then
		fail "$0: OS X platform older than 10.10" || exit 1
	fi
	# On Darwin, uname -m cannot be trusted.
	if sysctl hw.optional.x86_64 | grep -q ': 1'; then
		ARCH=x86_64
	fi

	OS=Darwin
	# disabled; see: https://github.com/golang/go/issues/35309
	VERIFY_RELSIG=0
fi

if [ "$(uname)" = Linux ]; then
	OS=Linux
fi

version() {
	ver=$(curl --retry 3 -sSL "https://golang.org/VERSION?m=text")
	if [ -z "$ver" ]; then
		echo "failed to query latest golang version" || exit 1
	fi

	printf "%s" "$ver"
}

install_go() {
	GO_VERSION=$(version)
	export GO_VERSION

	GO_SRC=/usr/local/go
	export GO_SRC

	if [ -x "$(command -v go)" ]; then
		ver=$(go tool dist version \
			| grep -E '^(go[0-9]+\.[0-9]+)([\.]?[0-9]*)($|rc|beta|\.)')

		if [ "$GO_VERSION" == "$ver" ]; then
			echo "go up to date ($GO_VERSION)" && exit 0
		fi
	fi

	if [ -d "$GO_SRC" ]; then
		sudo rm -rf "$GO_SRC"
	fi
	if [ -d "$GOPATH" ]; then
		sudo rm -rf "$GOPATH"
	fi

	(
	KERNEL=$(uname -s | tr '[:upper:]' '[:lower:]')
	test -n "$ARCH" || ARCH=$(cc -dumpmachine 2>/dev/null) || ARCH="unknown"
	ARCH=$(normalize_arch "$ARCH")
	GO_RELEASE="${MIRROR}${GO_VERSION}.${KERNEL}-${ARCH}.tar.gz"
	GO_SHA256=$(curl -fsSL "${GO_RELEASE}.sha256")

	curl -sSL "$GO_RELEASE" -o golang.tar.gz \
		&& echo "$GO_SHA256" golang.tar.gz | sha256sum -c -

	if [ -n "$VERIFY_RELSIG" ]; then
		GO_GPGPUBKEY=$(curl -sSL \
			https://dl-ssl.google.com/linux/linux_signing_key.pub)
		echo "$GO_GPGPUBKEY" | gpg --import
		curl -sSL "${GO_RELEASE}.asc" -o "rel.sig" \
			&& gpg --verify "rel.sig" golang.tar.gz \
			&& rm -rf rel.sig
	fi

	sudo tar -C /usr/local -xzf golang.tar.gz && rm golang.tar.gz

	# rebuild standard library
	sudo chown -R "${USER}" "${GO_SRC}/pkg"
	CGO_ENABLED=0 go install -a -installsuffix cgo std
	)

    for v in "${EXTRA_VERSIONS[@]}"; do
        go get golang.org/dl/"${v}"
        "$v" download
    done
}

fail () { echo >&2 "$*" ; exit 1 ; }

fail_unless_root() {
    if [ "$(id -u)" = "0" ]; then
		fail "$0: must be run as root"
		exit 1
	fi
}

normalize_arch() {
	case "$1" in
		x86-64* | x86_64* | amd64*)	echo 'amd64' ;;
		x86* | i[3456]86*)	echo '386' ;;
		armv6)	echo 'armv6l' ;;
		armv8)	echo 'arm64' ;;
		s390x*)	echo 's390x' ;;
		#ppc64)	echo 'ppc64' ;;
		#ppc64le)	echo 'ppc64le' ;;
		#mips | mipsle)	echo 'mips32le' ;;
		#mips64, mips64le)	echo 'mips64le'
		unknown)	fail "$0: unable to detect arch" ;;
		*)	fail "$0: unknown or unsupported target \"$1\"" ;;
	esac
}

if [ -z "$1" ]; then
	fail_unless_root
    install_go && exit 0
fi

usage() {
	sed -En '/^##$/,/^##$/p' "$0" | sed -E 's/^# ?//; 1d;$d;'
}

cmd="$1"
while (($# > 0)); do
	case "$cmd" in
		check-version|-c)
			# shellcheck disable=2091
			echo "$(version)"; exit 0
			;;
		help|-h)
			usage; exit 0
			;;
        *)
			usage; exit 1
            ;;
    esac
done
