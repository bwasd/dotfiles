#!/bin/bash
#
# toc generates table of contents sections for markdown documents.
#
# A table of contents is generated by parsing ATX headings in a markdown
# document, and inserted between the position markers TOC_START and TOC_END.
# Only ATX headings are parsed; Setext headings are ignored.
#
# If an error occured during parsing the original markdown will be left
# unmodified.
#
# Conforming to: version 0.29-gfm (2019-04-06) of the Github Flavoured Markdown
# (GFM) specification, and version 0.29 (2019-04-06) of the CommonMarkSpec
#
#   https://github.github.com/gfm
#   https://spec.commonmark.org/0.29
#
set -eo pipefail

usage() {
	cat <<-EOF
	Usage: $(basename "$0") SOURCE [DEST]
	toc generates table-contents sections for documentation
	EOF
}

SRC="$1"
if [ ! -f "$SRC" ]; then
	usage >&2;
	exit 1
fi

DEST="$1.tmp"
shift;

trap "rm -f $DEST" EXIT

toc="$(
	awk '
	/^```/ { ign = !ign } # ignore code blocks fenced by backticks
	/^#/ && !ign {
		lvl = length($1)
		$1 = ""
		gsub(/^[[:space:]]|[[:space:]]$/, "")
		++lvl_counter[lvl]
		for (i in lvl_counter) {
			if (i > lvl) { lvl_counter[i] = 0 }
		}

		prefix = lvl_counter[lvl] ".\t"
		for (i = 1; i < lvl; ++i) {
			prefix = "\t" prefix
		}

		# sections headings are lowercased and special escape
		esc = tolower($0)
		gsub(/ /, "-", esc)
		gsub(/[\/?!:\[\]`.,()*;{}+=<>~\$|#@&]/, "", esc)
		printf "%s[%s](#%s)\n", prefix, $0, esc
	}' "$SRC"
)"

TOC_START="^<!-- BEGIN generated code .*\. -->"
TOC_END="^<!-- END generated code .*\. -->"

awk -v toc="$toc" -v dest="$DEST" '
	BEGIN { ok = 0 }

	!ok && /'"$TOC_START"'/ {
		print $0 >> dest
		ok = 1
	}

	ok {
		p = p sep $0; sep = RS
	}

	ok && /'"$TOC_END"'/ {
		print toc >> dest; ok = !ok
	}

	!ok {
		print $0 >> dest
	}

	END { exit 0 }
' "$SRC"

if [ -s "$DEST" ]; then
	mv "$DEST" "$SRC"
else
    echo "writing to $DEST failed" >&2
    exit 1
fi
